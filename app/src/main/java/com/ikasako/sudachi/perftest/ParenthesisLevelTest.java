/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ikasako.sudachi.perftest;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ParenthesisLevelTest {
    private static final String PERIODS = "。|？|！|♪|…|\\?|\\!";
    private static final String DOT = "(\\.|．)";
    private static final String CDOT = "・";
    private static final String COMMA = "(,|，|、)";
    private static final String BR_TAG = "(<br>|<BR>){2,}";
    private static final String ALPHABET_OR_NUMBER = "[a-z]|[A-Z]|[0-9]|[ａ-ｚ]|[Ａ-Ｚ]|[０-９]|〇|一|二|三|四|五|六|七|八|九|十|百|千|万|億|兆";
    private static final Pattern SENTENCE_BREAKER_PATTERN = Pattern
            .compile("(" + PERIODS + "|" + CDOT + "{3,}+|((?<!(" + ALPHABET_OR_NUMBER + "))" + DOT + "(?!("
                    + ALPHABET_OR_NUMBER + "|" + COMMA + "))))(" + DOT + "|" + PERIODS + ")*|" + BR_TAG);

    private static final String OPEN_PARENTHESIS = "\\(|\\{|｛|\\[|（|「|【|『|［|≪|〔|“";
    private static final String CLOSE_PARENTHESIS = "\\)|\\}|\\]|）|」|｝|】|』|］|〕|≫|”";
    private static final Pattern PARENTHESIS_PATTERN = Pattern
            .compile("(" + OPEN_PARENTHESIS + ")|(" + CLOSE_PARENTHESIS + ")");

    public static void main(String[] args) throws Exception {
        ParenthesisLevelTest instance = new ParenthesisLevelTest();

        String plainText = Files.readString(Path.of("app/src/main/resources", "sentences.txt"));
        String spaceStr = StringUtil.replaceOddChar(plainText, ' ');
        System.out.println("space separated text. length:" + spaceStr.length());
        instance.execute(spaceStr, 100);

        spaceStr = StringUtil.amplification(spaceStr, 2);
        System.out.println("space separated text. length:" + spaceStr.length());
        instance.execute(spaceStr, 100);


        String newLineStr = StringUtil.replaceOddChar(plainText, '\n');
        System.out.println("newline separated text. length:" + newLineStr.length());
        instance.execute(newLineStr, 100);

        newLineStr = StringUtil.amplification(newLineStr, 2);
        System.out.println("newline separated text length:" + newLineStr.length());
        instance.execute(newLineStr, 100);
        
    }

    public void execute(String str, int times) {
        long start = System.currentTimeMillis();
        for (int i=0; i<times; i++) {
            run(str);
        }
        System.out.println(System.currentTimeMillis() - start + "ms");
        System.out.println("----------------------");

    }

    private void run(String str) {
        int length;
        while ((length = getEnd(str)) != 0) {
            str = str.substring(length);
        }
    }

    private int getEnd(String input) {
        int limit = 4096;
        CharSequence s = (input.length() > limit) ? input.subSequence(0, limit) : input;
        Matcher matcher = SENTENCE_BREAKER_PATTERN.matcher(s);
        while (matcher.find()) {
            int eos = matcher.end();
            if (parenthesisLevel(s.subSequence(0, eos)) == 0) {
                return eos;
            }
        }
        final Pattern spaces = Pattern.compile(".+\\s+");
        Matcher m = spaces.matcher(s);
        if (m.find()) {
            return m.end();
        }
        return 1;
    }

    int parenthesisLevel(CharSequence s) {
        Matcher matcher = PARENTHESIS_PATTERN.matcher(s);
        int level = 0;
        while (matcher.find()) {
            if (matcher.group(1) != null) { // open
                level++;
            } else {
                level--;
            }
            if (level < 0) {
                level = 0;
            }
        }
        return level;
    }
}
